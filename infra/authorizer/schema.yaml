vpauthorizer.ticketing.demo
  # Example Cedar JSON schema expressed in YAML. Single namespace is required by AVP.
  entityTypes:
    Tenant:
      # Enable nested tenants (tree)
      memberOfTypes: [Tenant]
      shape:
        type: Record
        attributes:
          name: { type: String }

    User:
      # Global entity; tenant-scoped permissions are granted via TenantGrant
      memberOfTypes: [GlobalRole]
      shape:
        type: Record
        attributes:
          userId: { type: String }

    Role:
      # No hierarchy for roles
      shape:
        type: Record
        attributes:
          name: { type: String }
          scope: { type: String } # "tenant"

    GlobalRole:
      shape:
        type: Record
        attributes:
          name: { type: String }
          scope: { type: String } # "global"

    TenantGrant:
      # Used as principal for tenant-scoped permissions
      memberOfTypes: [Role, Tenant, User]
      shape:
        type: Record
        attributes:
          tenantId: { type: String }
          userId: { type: String }

    # Resources
    Ticket:
      memberOfTypes: [Tenant]
      shape:
        type: Record
        attributes:
          title: { type: String }
          status: { type: String }
          assignee: { type: Entity, name: User }
          tenantId: { type: String }

    Event:
      memberOfTypes: [Tenant]
      shape:
        type: Record
        attributes:
          name: { type: String }
          tenantId: { type: String }

    File:
      memberOfTypes: [Tenant]
      shape:
        type: Record
        attributes:
          path: { type: String }
          tenantId: { type: String }

  actions:
    # Tenant-scoped action groups (apply to all principal types)
    Create:
      appliesTo:
        principalTypes: [User, GlobalRole, Role, Tenant, TenantGrant]
        resourceTypes: [Ticket, File, Event]
    Delete:
      appliesTo:
        principalTypes: [User, GlobalRole, Role, Tenant, TenantGrant]
        resourceTypes: [Ticket, File, Event]
    Find:
      appliesTo:
        principalTypes: [User, GlobalRole, Role, Tenant, TenantGrant]
        resourceTypes: [Ticket, File, Event]
    Get:
      appliesTo:
        principalTypes: [User, GlobalRole, Role, Tenant, TenantGrant]
        resourceTypes: [Ticket, File, Event]
    Update:
      appliesTo:
        principalTypes: [User, GlobalRole, Role, Tenant, TenantGrant]
        resourceTypes: [Ticket, File, Event]
    BatchUpdate:
      appliesTo:
        principalTypes: [User, GlobalRole, Role, Tenant, TenantGrant]
        resourceTypes: [Ticket, File, Event]

    # Globally-scoped action groups (apply to global principals only)
    GlobalCreate:
      appliesTo:
        principalTypes: [User, GlobalRole]
        resourceTypes: [Ticket, File, Event]
    GlobalDelete:
      appliesTo:
        principalTypes: [User, GlobalRole]
        resourceTypes: [Ticket, File, Event]
    GlobalFind:
      appliesTo:
        principalTypes: [User, GlobalRole]
        resourceTypes: [Ticket, File, Event]
    GlobalGet:
      appliesTo:
        principalTypes: [User, GlobalRole]
        resourceTypes: [Ticket, File, Event]
    GlobalUpdate:
      appliesTo:
        principalTypes: [User, GlobalRole]
        resourceTypes: [Ticket, File, Event]

    # Granular entity actions map to action groups via memberOf
    # Ticket actions (alphabetized)
    BatchUpdateTickets:
      memberOf: [BatchUpdate]
      appliesTo: { resourceTypes: [Ticket] }
    CreateTicket:
      memberOf: [Create]
      appliesTo: { resourceTypes: [Ticket] }
    DeleteTicket:
      memberOf: [Delete]
      appliesTo: { resourceTypes: [Ticket] }
    FindTickets:
      memberOf: [Find]
      appliesTo: { resourceTypes: [Ticket] }
    GetTicket:
      memberOf: [Get]
      appliesTo: { resourceTypes: [Ticket] }
    UpdateTicket:
      memberOf: [Update]
      appliesTo: { resourceTypes: [Ticket] }

    # File actions
    DeleteFile:
      memberOf: [Delete]
      appliesTo: { resourceTypes: [File] }
    GetFile:
      memberOf: [Get]
      appliesTo: { resourceTypes: [File] }
    UpdateFile:
      memberOf: [Update]
      appliesTo: { resourceTypes: [File] }

    # Event actions (alphabetized)
    FindEvents:
      memberOf: [Find]
      appliesTo: { resourceTypes: [Event] }
    GetEvent:
      memberOf: [Get]
      appliesTo: { resourceTypes: [Event] }
