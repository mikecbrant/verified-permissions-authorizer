{
  "$schema": "https://raw.githubusercontent.com/pulumi/pulumi/master/pkg/codegen/schema/pulumi.json",
  "name": "verified-permissions-authorizer",
  "version": "0.0.1",
  "description": "Bridged Go component provider that provisions an AWS Verified Permissions Policy Store and a Lambda Authorizer (runtime fixed to nodejs22.x).",
  "keywords": [
    "pulumi",
    "aws",
    "verified-permissions",
    "lambda",
    "authorizer"
  ],
  "repository": "https://github.com/mikecbrant/verified-permissions-authorizer",
  "license": "MIT",
  "types": {},
  "resources": {
    "verified-permissions-authorizer:index:AuthorizerWithPolicyStore": {
      "isComponent": true,
      "inputProperties": {
        "avpAssets": {
          "type": "object",
          "description": "Optional AVP schema and policy ingestion settings. When provided, the component will load a schema (YAML/JSON) and Cedar policy files from the given directory, validate them, apply the schema to the policy store (skipping when unchanged), and create static policies. It can also run optional post-deploy canary authorization checks.",
          "properties": {
            "dir": { "type": "string", "description": "Directory containing schema file and policies/ subfolder. Relative to Pulumi project root when not absolute.", "plain": true },
            "schemaFile": { "type": "string", "description": "Optional schema filename relative to dir. Defaults to schema.yaml|schema.yml|schema.json.", "plain": true },
            "policiesGlob": { "type": "string", "description": "Glob for policy files relative to dir (supports **). Defaults to policies/**/*.cedar.", "plain": true },
            "actionGroupEnforcement": { "type": "string", "enum": ["off", "warn", "error"], "default": "warn", "description": "Validate that action names map to canonical action groups (batchCreate, create, batchDelete, delete, find, get, batchUpdate, update)." },
            "requireGuardrails": { "type": "boolean", "default": true, "description": "Require baseline guardrail deny policies (01-deny-tenant-mismatch.cedar, 02-deny-tenant-role-global-admin.cedar)." },
            "postDeployCanary": { "type": "boolean", "default": false, "description": "Run post-deploy canary authorization checks defined in canaryFile (YAML)." },
            "canaryFile": { "type": "string", "description": "YAML file name relative to dir describing canary cases (default: canaries.yaml)." }
          },
          "required": ["dir"]
        },
        "cognito": {
          "type": "object",
          "description": "Provision an AWS Cognito User Pool and configure it as the Verified Permissions identity source.",
          "properties": {
            "sesConfig": {
              "type": "object",
              "description": "Optional: configure the User Pool to send email via Amazon SES (DEVELOPER). When provided, the pool's EmailConfiguration is set accordingly and a resource policy is attached to the SES identity authorizing the Cognito service principal scoped to this User Pool.",
              "properties": {
                "configurationSet": {
                  "type": "string",
                  "description": "Optional SES configuration set name"
                },
                "from": {
                  "type": "string",
                  "description": "From address. Must match the SES email identity or be within the SES domain identity."
                },
                "replyToEmail": {
                  "type": "string",
                  "description": "Optional Reply-To address"
                },
                "sourceArn": {
                  "type": "string",
                  "description": "SES identity ARN to send from. Example: arn:aws:ses:us-east-1:123456789012:identity/example.com",
                  "pattern": "^arn:(aws|aws-us-gov|aws-cn):ses:[a-z0-9-]+:[0-9]{12}:identity/.+$"
                }
              },
              "required": ["sourceArn", "from"]
            },
            "signInAliases": {
              "type": "array",
              "description": "Allowed sign-in identifiers for the User Pool.",
              "items": { "type": "string", "enum": ["email", "phone", "preferredUsername"] },
              "default": ["email"]
            }
          }
        },
        "description": {
          "type": "string",
          "description": "Policy store description",
          "plain": true
        },
        "dynamo": {
          "type": "object",
          "description": "DynamoDB auth table options.",
          "properties": {
            "enableDynamoDbStream": {
              "type": "boolean",
              "description": "If true, enable DynamoDB Streams (NEW_AND_OLD_IMAGES) on the auth table",
              "plain": true,
              "default": false
            }
          }
        },
        "lambda": {
          "type": "object",
          "description": "Settings for the bundled Lambda authorizer.",
          "properties": {
            "memorySize": {
              "type": "integer",
              "description": "Memory size for the Lambda function in MB.",
              "default": 128
            },
            "provisionedConcurrency": {
              "type": "integer",
              "description": "Provisioned concurrency units for the Lambda function (0 disables).",
              "default": 0
            },
            "reservedConcurrency": {
              "type": "integer",
              "description": "Reserved concurrency limit for the Lambda function.",
              "default": 1
            }
          }
        },
        "retainOnDelete": {
          "type": "boolean",
          "description": "When true, resources are retained on delete and protected from deletion where supported (e.g., Cognito User Pool deletion protection).",
          "plain": true,
          "default": false
        }
      },
      "requiredInputs": [],
      "properties": {
        "cognito": {
          "type": "object",
          "description": "Cognito-related outputs for the provisioned identity source (when configured).",
          "additionalProperties": false,
          "properties": {
            "userPoolArn": { "type": "string" },
            "userPoolClientIds": { "type": "array", "items": { "type": "string" } },
            "userPoolId": { "type": "string" }
          }
        },
        "dynamo": {
          "type": "object",
          "description": "DynamoDB auth table outputs.",
          "additionalProperties": false,
          "properties": {
            "AuthTableArn": {
              "type": "string",
              "description": "ARN of the DynamoDB auth table"
            },
            "AuthTableStreamArn": {
              "type": "string",
              "description": "ARN of the DynamoDB auth table stream (when streams are enabled)"
            }
          }
        },
        "lambda": {
          "type": "object",
          "description": "Lambda authorizer outputs.",
          "additionalProperties": false,
          "properties": {
            "authorizerFunctionArn": { "type": "string" },
            "roleArn": { "type": "string" }
          }
        },
        "parameters": { "type": "object", "additionalProperties": { "type": "string" } },
        "policyStoreArn": { "type": "string" },
        "policyStoreId": { "type": "string" }
      }
    }
  }
}
